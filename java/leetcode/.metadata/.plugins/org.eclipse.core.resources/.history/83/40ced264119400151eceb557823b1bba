package com.simon.candy;

import java.util.*;

public class Candy {

	/*
	 * 分析:
	 * 这题应该是用到极大值和极小值
	 * 找出所有极小值和极大值,比较极大值和旁边的两个极小值的距离,每个极小值从1开始取
	 * 极大值由距离较远者决定
	 * 极大值和极小值的判断
	 * a[i-1]>a[i]<a[i+1]极小值
	 * a[i-1]<a[i]>a[i+1]极大值
	 */
	public int noeqcandy(int[] ratings){
		return 0;
	}
	 /* 要注意相等的情况!!!
	 * 这题相等的情况的处理才是难点,之前的思路都是没考虑相等的,所以将那个单独写成一个
	 * 函数,而单独处理相等的情况,主要由两种情况
	 * ①相等的点为2
	 * 	断层:即将以两个相等的点为界一分为二
	 *  对每一组分别调用上面的函数
	 * ②相等的点>=3
	 * 	挖出这些点
	 */
	public int candy(int[] ratings) {
		int total=0;
		ArrayList<Integer> bp=new ArrayList<Integer>();
		LinkedList<Integer> list=new LinkedList<Integer>();
		for(int i:ratings){
			list.add(ratings[i]);
		}
		bp.add(0);
		if(ratings[0]==ratings[1])
			bp.add(0);
		for(int i=1;i<ratings.length-1;i++){
			int l=ratings[i-1],r=ratings[i+1],m=ratings[i];
			if(m==l && m==r){
				//对于和两端都相等的点,直接赋值为1,并去掉
				total++;
			}else if(m==l || m==r){
				bp.add(i);
			}
			
		}
		
		
		
		
		return 0;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedList<Integer> list=new LinkedList<Integer>();
		list.add(1);
		list.add(3);
		list.add(5);
		list.add(3);
		list.add(7);
		list.remove(0);
		for(int i:list)
			System.out.println(i);
	}

}
